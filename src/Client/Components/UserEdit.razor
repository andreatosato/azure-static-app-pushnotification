@using Blazoring.PWA.Shared.Models

@if (CurrentUser != null)
{
    <EditForm Model="CurrentUser" OnSubmit="Submit">
        <Validations @ref="validations" Mode="ValidationMode.Auto" Model="@CurrentUser" ValidateOnLoad="false">
            @if (!EditMode)
            {
                <Validation>
                    <Field>
                        <NumericEdit Placeholder="@nameof(User.Id)" @bind-Value="@CurrentUser.Id" Decimals="0">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </NumericEdit>
                    </Field>
                </Validation>
            }
            <Fields>
                <Validation>
                    <Field>
                        <TextEdit Placeholder="@nameof(User.FirstName)" @bind-Text="@CurrentUser.FirstName">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <TextEdit Placeholder="@nameof(User.LastName)" @bind-Text="@CurrentUser.LastName">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
            </Fields>
            <Field>
                <Validation Validator="@ValidationRule.IsEmail">
                    <TextEdit @bind-Text="@CurrentUser.Email" Role="TextRole.Email" Placeholder="@nameof(User.Email)">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Field>
            <Field>
                <Validation>
                    <TextEdit Text="@pictureUrl" TextChanged="@OnPictureChanged" Role="TextRole.Url" Placeholder="@nameof(User.Picture)">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Field>
            <Fields>
                <Validation>
                    <Field>
                        <TextEdit Placeholder="@nameof(User.JobTitle)" @bind-Text="@CurrentUser.JobTitle">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <TextEdit Placeholder="@nameof(User.JobType)" @bind-Text="@CurrentUser.JobType">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
            </Fields>
            <Field>
                <Validation>
                    <DateEdit @bind-Date="@CurrentUser.BirthDay" Placeholder="@nameof(User.BirthDay)">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </DateEdit>
                </Validation>
            </Field>
            <Fields>
                <Validation>
                    <Field>
                        <Select @bind-SelectedValue="@CurrentUser.Country.Name">
                            <ChildContent>
                                @if (Countries != null)
                                {
                                    <SelectItem Value="@("")"></SelectItem>
                                    foreach (var c in Countries)
                                    {
                                        <SelectItem Value="@(c.Name)">@(c.Name)</SelectItem>
                                    }
                                }
                            </ChildContent>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </Select>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <TextEdit Placeholder="@nameof(User.City)" @bind-Text="@CurrentUser.City">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
            </Fields>
        </Validations>
        <Buttons>
            <Button Color="Color.Success" Clicked="@Submit">Save</Button>
            <Button Color="Color.Danger" Clicked="@Undo">Undo</Button>
            <Button Color="Color.Warning" Clicked="@Clear">Clear</Button>
        </Buttons>
    </EditForm>
}

<Modal @ref="_saveModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <ModalHeader>Salvataggio</ModalHeader>
        <ModalBody>
            <Paragraph>Salvataggio riuscito</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Clicked="(() => _saveModal.Hide())" Color="Color.Primary"><Icon Name="@("done")" IconStyle="IconStyle.Solid"></Icon></Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    [Parameter]
    public bool EditMode { get; set; } = false;
    [Parameter]
    public User CurrentUser { get; set; } = new User(new Random().Next(0, int.MaxValue));
    [Parameter]
    public IList<Country> Countries { get; set; } = new List<Country>();
    [Inject]
    public IUserService UserService { get; set; }


    private Validations validations;
    private User _backupUser;
    private Modal _saveModal;

    string pictureUrl;
    void OnPictureChanged(string value)
    {
        if(Uri.TryCreate(value, UriKind.Absolute, out Uri result))
        {
            CurrentUser.Picture = new Uri(value);
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(CurrentUser != null)
        {
            pictureUrl = CurrentUser.Picture?.ToString();
            _backupUser = (User)CurrentUser.Clone();
            //_country = CurrentUser.Country.Name;
        }
    }

    async Task Submit()
    {
        bool isValid = validations.ValidateAll();
        if (isValid)
        {
            await UserService.SaveUserAsync(CurrentUser);
            _saveModal.Show();
        }
    }

    void Undo()
    {
        CurrentUser = (User)_backupUser.Clone();
        validations.ClearAll();
        StateHasChanged();
    }

    void Clear()
    {
        CurrentUser = (User)_backupUser.Clear();
        validations.ClearAll();
        StateHasChanged();
    }
}
